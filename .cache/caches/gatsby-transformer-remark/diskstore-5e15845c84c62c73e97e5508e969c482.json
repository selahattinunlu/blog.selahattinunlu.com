{"expireTime":9007200818055933000,"key":"transformer-remark-markdown-ast-50cddc89c2d54a025cabe5b2c03e2e6d-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-plugin-sitemap-","val":{"type":"root","children":[{"type":"heading","depth":3,"children":[{"type":"text","value":"Important Note","position":{"start":{"line":2,"column":5,"offset":5},"end":{"line":2,"column":19,"offset":19},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":19,"offset":19},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This article is not completed yet. I’ll continue it.","position":{"start":{"line":3,"column":1,"offset":20},"end":{"line":3,"column":53,"offset":72},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":20},"end":{"line":3,"column":53,"offset":72},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":5,"column":1,"offset":74},"end":{"line":5,"column":4,"offset":77},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Object Oriented Programming is a programming paradigm that uses objects.\nObjects are instance of the classes. Classes are kind of data structure that holds\ndata in their attributes. Except holding data, it has procedures. In object oriented programming,\nwe call them as methods. And classes can manipulate data, communicate with the other classes using that methods.","position":{"start":{"line":7,"column":1,"offset":79},"end":{"line":10,"column":113,"offset":445},"indent":[1,1,1]}}],"position":{"start":{"line":7,"column":1,"offset":79},"end":{"line":10,"column":113,"offset":445},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"It has some cool features like abstraction, encapsulation (data-hiding), inheritance, polymorphism.\nWe’ll talk about, be patient! :)","position":{"start":{"line":12,"column":1,"offset":447},"end":{"line":13,"column":33,"offset":579},"indent":[1]}}],"position":{"start":{"line":12,"column":1,"offset":447},"end":{"line":13,"column":33,"offset":579},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Encapsulation","position":{"start":{"line":15,"column":4,"offset":584},"end":{"line":15,"column":17,"offset":597},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":581},"end":{"line":15,"column":17,"offset":597},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It’s one of fundementals of Object Oriented Programming. It’s basically known as data-hiding.\nWe can think about light switches if we need to find a real example in the world to understand it.","position":{"start":{"line":17,"column":1,"offset":599},"end":{"line":18,"column":99,"offset":791},"indent":[1]}}],"position":{"start":{"line":17,"column":1,"offset":599},"end":{"line":18,"column":99,"offset":791},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The light switches only provides 2 action. You can turn it on and turn it off. \nBut what about the things that happened behind the scene? We don’t know. We don’t need to know it.\nElectrician guy handles everything for us and provides us to be able use only on and off actions without thinking about\nhow it works.","position":{"start":{"line":20,"column":1,"offset":793},"end":{"line":23,"column":14,"offset":1105},"indent":[1,1,1]}}],"position":{"start":{"line":20,"column":1,"offset":793},"end":{"line":23,"column":14,"offset":1105},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"So, some classes that we’ll create would need to hide some of its data and implementations from consumers.\nConsumers of that classes can’t access the data directly, can’t modify them directly. Only way to access and modify is using the\npublic methods provided by class.","position":{"start":{"line":25,"column":1,"offset":1107},"end":{"line":27,"column":34,"offset":1376},"indent":[1,1]}}],"position":{"start":{"line":25,"column":1,"offset":1107},"end":{"line":27,"column":34,"offset":1376},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Let me show an example","position":{"start":{"line":29,"column":1,"offset":1378},"end":{"line":29,"column":23,"offset":1400},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1378},"end":{"line":29,"column":23,"offset":1400},"indent":[]}},{"type":"html","lang":"php","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Computer</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">runCpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">runRam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">function</span> <span class=\"token function\">runCpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// implementation here...</span>\n        <span class=\"token comment\">// we can't access the private method from outside</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">function</span> <span class=\"token function\">runRam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// implementation here...</span>\n        <span class=\"token comment\">// we can't access the private method from outside</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>","position":{"start":{"line":31,"column":1,"offset":1402},"end":{"line":54,"column":4,"offset":1797},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If we try to access ","position":{"start":{"line":56,"column":1,"offset":1799},"end":{"line":56,"column":21,"offset":1819},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">runRam</code>","position":{"start":{"line":56,"column":21,"offset":1819},"end":{"line":56,"column":29,"offset":1827},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":56,"column":29,"offset":1827},"end":{"line":56,"column":33,"offset":1831},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">runCpu</code>","position":{"start":{"line":56,"column":33,"offset":1831},"end":{"line":56,"column":41,"offset":1839},"indent":[]}},{"type":"text","value":" in this example, we will encounter with an error.\nBecause they are ","position":{"start":{"line":56,"column":41,"offset":1839},"end":{"line":57,"column":18,"offset":1907},"indent":[1]}},{"type":"strong","children":[{"type":"text","value":"private","position":{"start":{"line":57,"column":20,"offset":1909},"end":{"line":57,"column":27,"offset":1916},"indent":[]}}],"position":{"start":{"line":57,"column":18,"offset":1907},"end":{"line":57,"column":29,"offset":1918},"indent":[]}},{"type":"text","value":" methods. Thus, the class hid the implementations from outside.","position":{"start":{"line":57,"column":29,"offset":1918},"end":{"line":57,"column":92,"offset":1981},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1799},"end":{"line":57,"column":92,"offset":1981},"indent":[1]}},{"type":"html","lang":"php","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token variable\">$myComputer</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$myComputer</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">runCpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// I encounter with an error, I'm not be able to run cpu myself.</span>\n\n<span class=\"token variable\">$myComputer</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// the computer will handle all process instead of us</span></span></code></pre></div>","position":{"start":{"line":59,"column":1,"offset":1983},"end":{"line":67,"column":4,"offset":2191},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Inheritance","position":{"start":{"line":69,"column":4,"offset":2196},"end":{"line":69,"column":15,"offset":2207},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":2193},"end":{"line":69,"column":15,"offset":2207},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Thanks to inheritance, we can derive a class from another one. What’s that mean? Actually,\nthat’s the way copy all behaviors and attributes of a class to the another one. In that way,\nit prevents the duplicates and provides us to re-use existing one. Also we can apply abstraction\nin that way.","position":{"start":{"line":71,"column":1,"offset":2209},"end":{"line":74,"column":13,"offset":2502},"indent":[1,1,1]}}],"position":{"start":{"line":71,"column":1,"offset":2209},"end":{"line":74,"column":13,"offset":2502},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Let’s explain in with an example","position":{"start":{"line":76,"column":1,"offset":2504},"end":{"line":76,"column":33,"offset":2536},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":2504},"end":{"line":76,"column":33,"offset":2536},"indent":[]}},{"type":"html","lang":"php","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">name</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Programmer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token variable\">$programmer</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Programmer</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Selahattin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$programmer</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// output => 'Selahattin'</span></span></code></pre></div>","position":{"start":{"line":78,"column":1,"offset":2538},"end":{"line":103,"column":4,"offset":2874},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"So, how is it working without have ","position":{"start":{"line":105,"column":1,"offset":2876},"end":{"line":105,"column":36,"offset":2911},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sayName</code>","position":{"start":{"line":105,"column":36,"offset":2911},"end":{"line":105,"column":45,"offset":2920},"indent":[]}},{"type":"text","value":" method?\nYes, you’re right it has not ","position":{"start":{"line":105,"column":45,"offset":2920},"end":{"line":106,"column":30,"offset":2958},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">sayName</code>","position":{"start":{"line":106,"column":30,"offset":2958},"end":{"line":106,"column":39,"offset":2967},"indent":[]}},{"type":"text","value":" method in own class definition.\nBut it extends the ","position":{"start":{"line":106,"column":39,"offset":2967},"end":{"line":107,"column":20,"offset":3019},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">Person</code>","position":{"start":{"line":107,"column":20,"offset":3019},"end":{"line":107,"column":28,"offset":3027},"indent":[]}},{"type":"text","value":" class. So we applied inheritance from Person to Programmer class.\nSo, thanks to its parent class, ","position":{"start":{"line":107,"column":28,"offset":3027},"end":{"line":108,"column":33,"offset":3126},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">Programmer</code>","position":{"start":{"line":108,"column":33,"offset":3126},"end":{"line":108,"column":45,"offset":3138},"indent":[]}},{"type":"text","value":" class has ","position":{"start":{"line":108,"column":45,"offset":3138},"end":{"line":108,"column":56,"offset":3149},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sayName</code>","position":{"start":{"line":108,"column":56,"offset":3149},"end":{"line":108,"column":65,"offset":3158},"indent":[]}},{"type":"text","value":" method as well.","position":{"start":{"line":108,"column":65,"offset":3158},"end":{"line":108,"column":81,"offset":3174},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":2876},"end":{"line":108,"column":81,"offset":3174},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Abstraction","position":{"start":{"line":110,"column":4,"offset":3179},"end":{"line":110,"column":15,"offset":3190},"indent":[]}}],"position":{"start":{"line":110,"column":1,"offset":3176},"end":{"line":110,"column":15,"offset":3190},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"…","position":{"start":{"line":112,"column":1,"offset":3192},"end":{"line":112,"column":4,"offset":3195},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":3192},"end":{"line":112,"column":4,"offset":3195},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Polymorphism","position":{"start":{"line":114,"column":4,"offset":3200},"end":{"line":114,"column":16,"offset":3212},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":3197},"end":{"line":114,"column":16,"offset":3212},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"…","position":{"start":{"line":116,"column":1,"offset":3214},"end":{"line":116,"column":4,"offset":3217},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":3214},"end":{"line":116,"column":4,"offset":3217},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":116,"column":4,"offset":3217}}}}